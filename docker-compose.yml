version: '3'

services:
  # NATS Server
  nats:
    image: nats:latest
    ports:
      - "4222:4222"
      - "8222:8222"
    command: ["--jetstream", "--http_port=8222"]
    networks:
      - mcp-network

  # MCP Server
  mcp-server:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - nats
    environment:
      - NATS_URL=nats://nats:4222
    command: >
      python -c "import asyncio, anyio, os, logging; 
      from examples.simple_example import echo; 
      from mcp.server.fastmcp.server import FastMcpServer; 
      from mcp.shared.session import Session; 
      from src.server import NatsServerParameters, nats_server; 
      
      logging.basicConfig(level=logging.INFO); 
      logger = logging.getLogger(__name__); 
      
      async def run(): 
          server = FastMcpServer(); 
          server.tools.register(echo); 
          nats_params = NatsServerParameters(
              url=os.environ.get('NATS_URL', 'nats://nats:4222'), 
              service_name='mcp.service', 
              server_id='echo-server-1'
          ); 
          logger.info('Starting MCP server with NATS transport'); 
          async with nats_server(nats_params) as (read_stream, write_stream): 
              session = Session(); 
              try: 
                  await server.run(session, read_stream, write_stream); 
              except Exception as e: 
                  logger.exception(f'Server error: {e}'); 
      
      anyio.run(run)"
    networks:
      - mcp-network

  # MCP Client
  mcp-client:
    build:
      context: .
      dockerfile: Dockerfile
    depends_on:
      - mcp-server
    environment:
      - NATS_URL=nats://nats:4222
    command: >
      python -c "import asyncio, anyio, os, logging; 
      from mcp.client.session import ClientSession; 
      from src.client import NatsClientParameters, nats_client; 
      
      logging.basicConfig(level=logging.INFO); 
      logger = logging.getLogger(__name__); 
      
      async def run(): 
          await asyncio.sleep(5); 
          nats_params = NatsClientParameters(
              url=os.environ.get('NATS_URL', 'nats://nats:4222'), 
              service_name='mcp.service', 
              client_id='echo-client-1'
          ); 
          logger.info('Starting MCP client with NATS transport'); 
          async with nats_client(nats_params) as (read_stream, write_stream): 
              client = ClientSession(); 
              await client.initialize(read_stream, write_stream); 
              tools = await client.list_tools(); 
              logger.info(f'Available tools: {[tool.name for tool in tools.tools]}'); 
              if 'echo' in [t.name for t in tools.tools]: 
                  result = await client.call_tool('echo', {'text': 'Hello via NATS service!'}); 
                  logger.info(f'Echo result: {result.content[0].text}'); 
              else: 
                  logger.error(f'Echo tool not found. Available tools: {[tool.name for tool in tools.tools]}'); 
      
      anyio.run(run)"
    networks:
      - mcp-network

networks:
  mcp-network:
    driver: bridge